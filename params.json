{"name":"Twinlife-doc","tagline":"Organization of the Twinlife services API","body":"## Welcome to the Twinlife GitHub Pages.\r\n\r\nTwinlife services are available for the following native target environments:\r\n* Android: Java\r\n* iOS: Objective C\r\n* Web applications: Javascript and Web Components (Polymer)\r\n\r\nFor each target environment, Twinlife services are organized as a hierarchy along the following levels:\r\n* Twinlife Base Services: generic twinlife platform services\r\n* Application Services: services specific to a particular application or extensions to the Twinlife Base Services.\r\n\r\n## Twinlife Base Services\r\n\r\n#### Management Service\r\n* Configuration\r\n* Events\r\n* Notifications\r\n* Reports\r\n\r\n#### Account Service\r\n* Sign Up\r\n* Sign In\r\n* Sign Out\r\n\r\n#### Connectivity Service\r\n* Application connection/disconnection\r\n* To Server\r\n* To Internet\r\n\r\n#### Roster Service (XMPP)\r\n* Contacts\r\n* Groups\r\n* Invitations\r\n\r\n#### Chat Service (XMPP)\r\n* Text chat messages\r\n\r\n#### Directory Service\r\n* Name to Object directory (LDAP style)\r\n\r\n#### Repository Service\r\n* Object data base (based on PostgreSQL)\r\n* Distributed fine grain mobile objects management\r\n\r\n#### Peer Connection Service (WebRTC)\r\n* Peer Connection\r\n* Media Stream\r\n* Data Channel\r\n\r\n#### Twincode Services\r\n* Twincode Factory Service\r\n* Twincode INbound Service\r\n* Twincode OUTbound Service\r\n* Twincode Switch Service\r\n\r\n## Twinme Application Services\r\n* Twinme typed objects: using Twinlife Repository Service\r\n* Twinme protocol: extension to Twinlife Peer Connection Service\r\n* Real-time text (chat): using WebRTC Data Channel\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}